{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ws-react\\\\portfolio\\\\src\\\\Site\\\\pages\\\\Projetos\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Card from './components/card';\nimport './projetos.css';\nimport Header from './components/header';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Projetos() {\n  _s();\n  const [repositories, setRepositories] = useState([]);\n  useEffect(() => {\n    const fetchRepositories = async () => {\n      try {\n        const response = await axios.get('https://api.github.com/users/talitacastrofreitas/repos');\n        const data = response.data;\n        const repositoriesWithImages = await Promise.all(data.map(async repo => {\n          const readmeResponse = await axios.get(`https://raw.githubusercontent.com/${repo.full_name}/main/README.md`);\n          const readmeContent = readmeResponse.data;\n\n          // Regex para encontrar URLs de imagens no Markdown\n          const imageRegex = /!\\[.*?\\]\\((.*?)\\)/g;\n          const matches = [...readmeContent.matchAll(imageRegex)];\n          if (matches.length > 0) {\n            const imageUrl = matches[0][1];\n\n            // Faz a requisição para a URL da imagem\n            const imageResponse = await axios.get(imageUrl, {\n              responseType: 'arraybuffer'\n            });\n            const imageBlob = new Blob([imageResponse.data], {\n              type: imageResponse.headers['content-type']\n            });\n\n            // Cria uma URL de objeto (blob) para a imagem\n            const imageUrlBlob = URL.createObjectURL(imageBlob);\n            return {\n              ...repo,\n              image: imageUrlBlob\n            };\n          } else {\n            return repo;\n          }\n        }));\n        setRepositories(repositoriesWithImages);\n      } catch (error) {\n        console.error('Erro ao obter a lista de repositórios', error);\n      }\n    };\n    fetchRepositories();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-white mb-4\",\n        children: \"PROJETOS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: repositories.length > 0 ? repositories.map(repo => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-3 mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            social_preview: repo.social_preview,\n            name: repo.name,\n            description: repo.description,\n            html_url: repo.html_url,\n            image: repo.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this)\n        }, repo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white\",\n          children: \"Carregando reposit\\xF3rios...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(Projetos, \"BOCi1fzyIWTfYUJ6DGWtKZ5UKvY=\");\n_c = Projetos;\nexport default Projetos;\nvar _c;\n$RefreshReg$(_c, \"Projetos\");","map":{"version":3,"names":["useEffect","useState","Card","Header","axios","jsxDEV","_jsxDEV","Projetos","_s","repositories","setRepositories","fetchRepositories","response","get","data","repositoriesWithImages","Promise","all","map","repo","readmeResponse","full_name","readmeContent","imageRegex","matches","matchAll","length","imageUrl","imageResponse","responseType","imageBlob","Blob","type","headers","imageUrlBlob","URL","createObjectURL","image","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","social_preview","name","description","html_url","id","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/ws-react/portfolio/src/Site/pages/Projetos/index.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Card from './components/card';\r\nimport './projetos.css';\r\nimport Header from './components/header';\r\nimport axios from 'axios';\r\n\r\nfunction Projetos() {\r\n  const [repositories, setRepositories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchRepositories = async () => {\r\n      try {\r\n        const response = await axios.get('https://api.github.com/users/talitacastrofreitas/repos');\r\n        const data = response.data;\r\n\r\n        const repositoriesWithImages = await Promise.all(\r\n          data.map(async (repo) => {\r\n            const readmeResponse = await axios.get(`https://raw.githubusercontent.com/${repo.full_name}/main/README.md`);\r\n            const readmeContent = readmeResponse.data;\r\n\r\n            // Regex para encontrar URLs de imagens no Markdown\r\n            const imageRegex = /!\\[.*?\\]\\((.*?)\\)/g;\r\n            const matches = [...readmeContent.matchAll(imageRegex)];\r\n\r\n            if (matches.length > 0) {\r\n              const imageUrl = matches[0][1];\r\n\r\n              // Faz a requisição para a URL da imagem\r\n              const imageResponse = await axios.get(imageUrl, { responseType: 'arraybuffer' });\r\n              const imageBlob = new Blob([imageResponse.data], { type: imageResponse.headers['content-type'] });\r\n\r\n              // Cria uma URL de objeto (blob) para a imagem\r\n              const imageUrlBlob = URL.createObjectURL(imageBlob);\r\n\r\n              return { ...repo, image: imageUrlBlob };\r\n            } else {\r\n              return repo;\r\n            }\r\n          })\r\n        );\r\n\r\n        setRepositories(repositoriesWithImages);\r\n      } catch (error) {\r\n        console.error('Erro ao obter a lista de repositórios', error);\r\n      }\r\n    };\r\n\r\n    fetchRepositories();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container mt-4\">\r\n        <h2 className=\"text-white mb-4\">PROJETOS</h2>\r\n        <div className=\"row\">\r\n          {repositories.length > 0 ? (\r\n            repositories.map((repo) => (\r\n              <div key={repo.id} className=\"col-lg-3 mb-3\">\r\n                <Card\r\n                  social_preview={repo.social_preview}\r\n                  name={repo.name}\r\n                  description={repo.description}\r\n                  html_url={repo.html_url}\r\n                  image={repo.image}\r\n                />\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p className=\"text-white\">Carregando repositórios...</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Projetos;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}