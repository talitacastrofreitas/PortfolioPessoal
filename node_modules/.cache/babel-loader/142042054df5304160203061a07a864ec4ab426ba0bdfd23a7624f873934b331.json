{"ast":null,"code":"// ...\n\nuseEffect(() => {\n  const buscarRepositorios = async () => {\n    try {\n      const resposta = await fetch('https://api.github.com/users/talitacastrofreitas/repos');\n      const dados = await resposta.json();\n      const repositoriosComImagens = await Promise.all(dados.map(async repo => {\n        try {\n          const readmeResponse = await fetch(`https://raw.githubusercontent.com/${repo.full_name}/main/README.md`);\n          const readmeContent = await readmeResponse.text();\n\n          // Lógica para extrair a URL da imagem do conteúdo do README.md\n          const matches = readmeContent.match(/!\\[.*?\\]\\((.*?)\\)/);\n          return {\n            ...repo,\n            image_url: matches ? matches[1] : null\n          };\n        } catch (error) {\n          console.error(`Erro ao buscar README.md do repositório ${repo.full_name}`, error);\n          return {\n            ...repo,\n            image_url: null\n          };\n        }\n      }));\n      setRepositories(repositoriosComImagens);\n    } catch (error) {\n      console.error('Erro ao buscar repositórios', error);\n    }\n  };\n  buscarRepositorios();\n}, []);\n\n// ...","map":{"version":3,"names":["useEffect","buscarRepositorios","resposta","fetch","dados","json","repositoriosComImagens","Promise","all","map","repo","readmeResponse","full_name","readmeContent","text","matches","match","image_url","error","console","setRepositories"],"sources":["C:/xampp/htdocs/ws-react/portfolio/src/Site/pages/Projetos/index.js"],"sourcesContent":["// ...\r\n\r\nuseEffect(() => {\r\n  const buscarRepositorios = async () => {\r\n    try {\r\n      const resposta = await fetch('https://api.github.com/users/talitacastrofreitas/repos');\r\n      const dados = await resposta.json();\r\n\r\n      const repositoriosComImagens = await Promise.all(\r\n        dados.map(async (repo) => {\r\n          try {\r\n            const readmeResponse = await fetch(`https://raw.githubusercontent.com/${repo.full_name}/main/README.md`);\r\n            const readmeContent = await readmeResponse.text();\r\n\r\n            // Lógica para extrair a URL da imagem do conteúdo do README.md\r\n            const matches = readmeContent.match(/!\\[.*?\\]\\((.*?)\\)/);\r\n\r\n            return {\r\n              ...repo,\r\n              image_url: matches ? matches[1] : null,\r\n            };\r\n          } catch (error) {\r\n            console.error(`Erro ao buscar README.md do repositório ${repo.full_name}`, error);\r\n            return {\r\n              ...repo,\r\n              image_url: null,\r\n            };\r\n          }\r\n        })\r\n      );\r\n\r\n      setRepositories(repositoriosComImagens);\r\n    } catch (error) {\r\n      console.error('Erro ao buscar repositórios', error);\r\n    }\r\n  };\r\n\r\n  buscarRepositorios();\r\n}, []);\r\n\r\n// ...\r\n"],"mappings":"AAAA;;AAEAA,SAAS,CAAC,MAAM;EACd,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wDAAwD,CAAC;MACtF,MAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAEnC,MAAMC,sBAAsB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC9CJ,KAAK,CAACK,GAAG,CAAC,MAAOC,IAAI,IAAK;QACxB,IAAI;UACF,MAAMC,cAAc,GAAG,MAAMR,KAAK,CAAE,qCAAoCO,IAAI,CAACE,SAAU,iBAAgB,CAAC;UACxG,MAAMC,aAAa,GAAG,MAAMF,cAAc,CAACG,IAAI,CAAC,CAAC;;UAEjD;UACA,MAAMC,OAAO,GAAGF,aAAa,CAACG,KAAK,CAAC,mBAAmB,CAAC;UAExD,OAAO;YACL,GAAGN,IAAI;YACPO,SAAS,EAAEF,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAG;UACpC,CAAC;QACH,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAE,2CAA0CR,IAAI,CAACE,SAAU,EAAC,EAAEM,KAAK,CAAC;UACjF,OAAO;YACL,GAAGR,IAAI;YACPO,SAAS,EAAE;UACb,CAAC;QACH;MACF,CAAC,CACH,CAAC;MAEDG,eAAe,CAACd,sBAAsB,CAAC;IACzC,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAEDjB,kBAAkB,CAAC,CAAC;AACtB,CAAC,EAAE,EAAE,CAAC;;AAEN"},"metadata":{},"sourceType":"module","externalDependencies":[]}