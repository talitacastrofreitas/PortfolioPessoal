{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ws-react\\\\portfolio\\\\src\\\\Site\\\\pages\\\\Projetos\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Projetos() {\n  _s();\n  const [repositories, setRepositories] = useState([]);\n  useEffect(() => {\n    const fetchRepositories = async () => {\n      try {\n        // Substitua 'seu-usuario' pelo seu nome de usuário do GitHub\n        const response = await axios.get(\"https://api.github.com/users/talitacastrofreitas/repos\");\n        const repositoriesWithImages = await Promise.all(response.data.map(async repo => {\n          // Obter o conteúdo do README.md\n          const readmeResponse = await axios.get(`https://raw.githubusercontent.com/${repo.full_name}/master/README.md`);\n\n          // Extrair a URL da imagem de pré-visualização do README.md\n          const imageUrl = extractImageUrlFromReadme(readmeResponse.data);\n          return {\n            ...repo,\n            image_url: imageUrl\n          };\n        }));\n        setRepositories(repositoriesWithImages);\n      } catch (error) {\n        console.error(\"Erro ao obter a lista de repositórios\", error);\n      }\n    };\n    fetchRepositories();\n  }, []);\n\n  // Função para extrair a URL da imagem do README.md\n  const extractImageUrlFromReadme = readmeContent => {\n    // Lógica para extrair a URL da imagem do conteúdo do README.md\n    // Implemente de acordo com o formato específico do seu README.md\n    // Por exemplo, você pode usar expressões regulares ou outras técnicas de manipulação de strings.\n\n    // Exemplo de lógica simples: procurar por uma tag de imagem markdown\n    const match = readmeContent.match(/!\\[.*\\]\\((.*?)\\)/);\n\n    // Retorna a URL da imagem se encontrada, ou uma URL padrão de imagem de fallback\n    return match ? match[1] : \"URL_DE_FALLBACK\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lista de Reposit\\xF3rios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), repositories.map(repo => /*#__PURE__*/_jsxDEV(Card, {\n      name: repo.name,\n      description: repo.description,\n      html_url: repo.html_url,\n      image_url: repo.image_url\n    }, repo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Projetos, \"BOCi1fzyIWTfYUJ6DGWtKZ5UKvY=\");\n_c = Projetos;\nexport default Projetos;\nvar _c;\n$RefreshReg$(_c, \"Projetos\");","map":{"version":3,"names":["React","useState","useEffect","axios","Card","jsxDEV","_jsxDEV","Projetos","_s","repositories","setRepositories","fetchRepositories","response","get","repositoriesWithImages","Promise","all","data","map","repo","readmeResponse","full_name","imageUrl","extractImageUrlFromReadme","image_url","error","console","readmeContent","match","children","fileName","_jsxFileName","lineNumber","columnNumber","name","description","html_url","id","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/ws-react/portfolio/src/Site/pages/Projetos/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"./components/card\";\r\n\r\nfunction Projetos() {\r\n  const [repositories, setRepositories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchRepositories = async () => {\r\n      try {\r\n        // Substitua 'seu-usuario' pelo seu nome de usuário do GitHub\r\n        const response = await axios.get(\r\n          \"https://api.github.com/users/talitacastrofreitas/repos\"\r\n        );\r\n\r\n        const repositoriesWithImages = await Promise.all(\r\n          response.data.map(async (repo) => {\r\n            // Obter o conteúdo do README.md\r\n            const readmeResponse = await axios.get(\r\n              `https://raw.githubusercontent.com/${repo.full_name}/master/README.md`\r\n            );\r\n\r\n            // Extrair a URL da imagem de pré-visualização do README.md\r\n            const imageUrl = extractImageUrlFromReadme(readmeResponse.data);\r\n\r\n            return {\r\n              ...repo,\r\n              image_url: imageUrl,\r\n            };\r\n          })\r\n        );\r\n\r\n        setRepositories(repositoriesWithImages);\r\n      } catch (error) {\r\n        console.error(\"Erro ao obter a lista de repositórios\", error);\r\n      }\r\n    };\r\n\r\n    fetchRepositories();\r\n  }, []);\r\n\r\n  // Função para extrair a URL da imagem do README.md\r\n  const extractImageUrlFromReadme = (readmeContent) => {\r\n    // Lógica para extrair a URL da imagem do conteúdo do README.md\r\n    // Implemente de acordo com o formato específico do seu README.md\r\n    // Por exemplo, você pode usar expressões regulares ou outras técnicas de manipulação de strings.\r\n\r\n    // Exemplo de lógica simples: procurar por uma tag de imagem markdown\r\n    const match = readmeContent.match(/!\\[.*\\]\\((.*?)\\)/);\r\n\r\n    // Retorna a URL da imagem se encontrada, ou uma URL padrão de imagem de fallback\r\n    return match ? match[1] : \"URL_DE_FALLBACK\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Lista de Repositórios</h1>\r\n      {repositories.map((repo) => (\r\n        <Card\r\n          key={repo.id}\r\n          name={repo.name}\r\n          description={repo.description}\r\n          html_url={repo.html_url}\r\n          image_url={repo.image_url}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Projetos;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMS,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAC9B,wDACF,CAAC;QAED,MAAMC,sBAAsB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC9CJ,QAAQ,CAACK,IAAI,CAACC,GAAG,CAAC,MAAOC,IAAI,IAAK;UAChC;UACA,MAAMC,cAAc,GAAG,MAAMjB,KAAK,CAACU,GAAG,CACnC,qCAAoCM,IAAI,CAACE,SAAU,mBACtD,CAAC;;UAED;UACA,MAAMC,QAAQ,GAAGC,yBAAyB,CAACH,cAAc,CAACH,IAAI,CAAC;UAE/D,OAAO;YACL,GAAGE,IAAI;YACPK,SAAS,EAAEF;UACb,CAAC;QACH,CAAC,CACH,CAAC;QAEDZ,eAAe,CAACI,sBAAsB,CAAC;MACzC,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IAEDd,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,yBAAyB,GAAII,aAAa,IAAK;IACnD;IACA;IACA;;IAEA;IACA,MAAMC,KAAK,GAAGD,aAAa,CAACC,KAAK,CAAC,kBAAkB,CAAC;;IAErD;IACA,OAAOA,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,iBAAiB;EAC7C,CAAC;EAED,oBACEtB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC7BxB,YAAY,CAACS,GAAG,CAAEC,IAAI,iBACrBb,OAAA,CAACF,IAAI;MAEH8B,IAAI,EAAEf,IAAI,CAACe,IAAK;MAChBC,WAAW,EAAEhB,IAAI,CAACgB,WAAY;MAC9BC,QAAQ,EAAEjB,IAAI,CAACiB,QAAS;MACxBZ,SAAS,EAAEL,IAAI,CAACK;IAAU,GAJrBL,IAAI,CAACkB,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKb,CACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzB,EAAA,CAhEQD,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AAkEjB,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}